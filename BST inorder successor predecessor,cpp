/*
Inorder Successor/Predecessor in BST 
*/
#include <bits/stdc++.h>
using namespace std;

class Node
{
    public:
    int data;
    Node* left;
    Node* right;
    Node(int data1)
    {
        data=data1;
        left=nullptr;
        right=nullptr;
    }
    Node(int data1, Node* left1, Node* right1)
    {
        data=data1;
        left=left1;
        right=right1;
    }
};

void inorder(Node* root)
{
    if(root==NULL) return;
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

void bruteforce(Node* root, vector<int> &res)
{
    if(root==NULL) return;
    bruteforce(root->left,res);
    res.push_back(root->data);
    bruteforce(root->right,res);
}

void optimised_inorder_predecessor(Node* root, int val)
{
    int predecessor=0;
    while(root!=NULL)
    {
        if(val>root->data)
        {
            predecessor=root->data;
            root=root->right;
        }
        else 
        {
            root=root->left;
        }
    }
    cout<<predecessor<<endl;
}

void optimised_inorder_successor(Node* root, int val)
{
    int successor=0;
    while(root!=NULL)
    {
        if(val>=root->data)
        {
            root=root->right;
        }
        else 
        {
            successor=root->data;
            root=root->left;
        }
    }
    cout<<successor<<endl;
}

int main()
{
    Node* root=new Node(5);
    root->left=new Node(3);
    root->left->left=new Node(1);
    root->left->right=new Node(4);
    root->right=new Node(7);
    root->right->left=new Node(6);
    root->right->right=new Node(8);
    inorder(root);
    vector<int> a;
    int key=6;
    bruteforce(root,a);
    cout<<endl;
    for(int i=0;i<a.size();i++)
    {
        cout<<a[i]<<" ";
    }
    cout<<endl;
    int start = 0, end = a.size() - 1, mid;
    while (start <= end) 
    {
        mid = start + ((end - start) / 2);
        if (a[mid] == key)
            break;
        else if (a[mid] > key)
            end = mid - 1; 
        else
            start = mid + 1;
    }
    cout<<a[mid-1]<<" "<<a[mid]<<" "<<a[mid+1]<<endl;
    optimised_inorder_successor(root,6);
    optimised_inorder_predecessor(root,6);
}

